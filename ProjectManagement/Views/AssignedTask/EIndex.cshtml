@model IEnumerable<ProjectManagement.Models.AssignedTask>
@using ProjectManagement.Models
@{
    ViewData["Title"] = "My Tasks";
    var taskId = Context.Request.Query["taskId"].FirstOrDefault();
    bool viewingSingle = !string.IsNullOrEmpty(taskId);
    string returnUrl = Context.Request.Path + Context.Request.QueryString;
}

<div class="app-content">
    <div class="container-fluid">

        <!-- Header Row -->
        <div class="d-flex justify-content-between align-items-start mb-4">
            <h2 class="fw-bold text-primary">📋 My Assigned Tasks</h2>
            @if (viewingSingle)
            {
                <a href="/AssignedTask/EIndex" class="btn btn-outline-primary ms-auto">
                    <i class="bi bi-arrow-left-circle"></i> Show All Tasks
                </a>
            }
        </div>

        <!-- Alerts -->
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show shadow-sm" role="alert">
                <i class="bi bi-exclamation-circle"></i> @TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show shadow-sm" role="alert">
                <i class="bi bi-check-circle"></i> @TempData["Success"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        <!-- Filters (only if not single task view) -->
        @if (!viewingSingle)
        {
            <div class="row g-3 align-items-end mb-4">
                <div class="col-md-3">
                    <label class="form-label">Filter by Status</label>
                    <select id="statusFilter" class="form-select">
                        <option value="">-- All --</option>
                        @foreach (var status in Enum.GetValues(typeof(ProjectManagement.Models.TaskStatus)))
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </div>
                <div class="col-md-3 position-relative">
                    <label class="form-label">Filter by Due Date</label>
                    <div class="input-group">
                        <select id="dueFilter" class="form-select">
                            <option value="">-- All Time --</option>
                            <option value="7">Within 7 Days</option>
                            <option value="15">Within 15 Days</option>
                            <option value="30">Within 30 Days</option>
                            <option value="custom">Select Date...</option>
                        </select>
                        <span class="input-group-text bg-white border-start-0">
                            <i class="bi bi-calendar-event"></i>
                        </span>
                    </div>
                    <input type="date" id="customDatePicker" class="form-control mt-2 d-none" />
                </div>
                <div class="col-md-auto">
                    <button id="clearFilters" class="btn btn-outline-secondary w-100 mt-3">
                        <i class="bi bi-x-circle"></i> Clear
                    </button>
                </div>
            </div>
        }

        <!-- Task Cards -->
        <div class="row g-4 @(viewingSingle ? "justify-content-center" : "")" id="taskContainer">
            @if (!Model.Any())
            {
                <div class="col-12">
                    <div class="alert alert-info shadow-sm">
                        <i class="bi bi-inbox"></i> No tasks available.
                    </div>
                </div>
            }
            else
            {
                @foreach (var item in Model
                            )
                {
                    var isHighlighted = viewingSingle && taskId == item.AssignedTaskId.ToString();
                    <div class="col-md-6 col-lg-4 task-card @(isHighlighted ? "highlight-task" : "")"
                         data-duedate="@item.DueDate.ToString("yyyy-MM-dd")"
                         data-status="@item.Status">
                        <div class="card shadow-sm border-0 h-100">
                            <div class="card-body d-flex flex-column">

                                <!-- Title & Status -->
                                <div class="d-flex justify-content-between align-items-start mb-3">
                                    <h5 class="card-title fw-bold text-dark">
                                        @(string.IsNullOrWhiteSpace(item.Task?.Title) ? "Untitled Task" : item.Task.Title)
                                    </h5>
                                    <span class="badge rounded-pill
                                                        @(item.Status == ProjectManagement.Models.TaskStatus.Pending ? "bg-secondary" :
                                                                                              item.Status == ProjectManagement.Models.TaskStatus.InProgress ? "bg-warning text-dark" :
                                                                                              item.Status == ProjectManagement.Models.TaskStatus.Completed ? "bg-success" :
                                                                                              item.Status == ProjectManagement.Models.TaskStatus.Overdue ? "bg-danger" :
                                                                                              "bg-info")">
                                @item.Status
                            </span>
                        </div>

                                <!-- Due Date -->
                                <p class="text-muted mb-2">
                                    <i class="bi bi-calendar-event"></i> Due: @item.DueDate.ToShortDateString()
                                </p>

                                <!-- Reference -->
                                <p class="mb-2">
                                    <strong>Reference:</strong><br />
                            @if (!string.IsNullOrEmpty(item.ReferenceFilePath))
                                    {
                                        <a href="@item.ReferenceFilePath" target="_blank" class="btn btn-sm btn-outline-primary mt-1">
                                            <i class="bi bi-file-earmark-text"></i> View File
                                        </a>
                                    }
                                    else if (!string.IsNullOrEmpty(item.ReferenceLink))
                                    {
                                        <a href="@item.ReferenceLink" target="_blank" class="btn btn-sm btn-outline-secondary mt-1">
                                            <i class="bi bi-link-45deg"></i> Open Link
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No reference</span>
                                    }
                                </p>

                                <!-- Submission -->
                                <p class="mb-2">
                                    <strong>My Submission:</strong><br />
                                    @if (!string.IsNullOrEmpty(item.SubmissionFilePath))
                                    {
                                        <a href="@item.SubmissionFilePath" target="_blank" class="btn btn-sm btn-outline-success mt-1">
                                            <i class="bi bi-file-earmark-arrow-up"></i> View File
                                        </a>
                                    }
                                    else if (!string.IsNullOrEmpty(item.SubmissionLink))
                                    {
                                        <a href="@item.SubmissionLink" target="_blank" class="btn btn-sm btn-outline-info mt-1">
                                            <i class="bi bi-link-45deg"></i> Open Link
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not submitted</span>
                                    }
                                </p>

                                <!-- Existing Remarks -->
                                @if (!string.IsNullOrWhiteSpace(item.Remarks))
                                {
                                    <p class="small text-muted border-top pt-2">@item.Remarks</p>
                                }

                                <!-- Separate Remark Form -->
                                @if (item.Status != ProjectManagement.Models.TaskStatus.Completed)
                                {
                                    <form asp-action="UpdateStatus" method="post" class="mb-2">
                                        <input type="hidden" name="id" value="@item.AssignedTaskId" />
                                        <input type="hidden" name="returnUrl" value="@returnUrl" />
                                        <div class="input-group input-group-sm">
                                            <input type="text" name="remark" class="form-control" placeholder="Add a remark..." />
                                            <button type="submit" class="btn btn-outline-primary">
                                                <i class="bi bi-plus-circle"></i> Add
                                            </button>
                                        </div>
                                    </form>
                                }

                                <!-- Actions -->
                                <div class="mt-auto">
                                    <form asp-action="UpdateStatus" method="post" enctype="multipart/form-data">
                                        <input type="hidden" name="id" value="@item.AssignedTaskId" />
                                        <input type="hidden" name="returnUrl" value="@returnUrl" />

                                        @if (item.Status == ProjectManagement.Models.TaskStatus.Pending)
                                        {
                                            <input type="hidden" name="newStatus" value="2" />
                                            <button type="submit" class="btn btn-success w-100">
                                                <i class="bi bi-play-fill"></i> Accept Task
                                            </button>
                                        }
                                        else if (item.Status == ProjectManagement.Models.TaskStatus.InProgress ||
                                        item.Status == ProjectManagement.Models.TaskStatus.Overdue)
                                        {
                                            <input type="hidden" name="newStatus" value="3" />
                                            <label class="form-label fw-semibold mt-2">
                                                Upload File or Link
                                                <div class="form-check form-check-inline ms-2">
                                                    <input class="form-check-input toggle-submission" type="radio"
                                                           name="submissionOption-@item.AssignedTaskId" value="file" checked
                                                           data-taskid="@item.AssignedTaskId">
                                                    <i class="bi bi-paperclip"></i>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input toggle-submission" type="radio"
                                                           name="submissionOption-@item.AssignedTaskId" value="link"
                                                           data-taskid="@item.AssignedTaskId">
                                                    <i class="bi bi-link-45deg"></i>
                                                </div>
                                            </label>

                                            <div class="input-group input-group-sm mb-2">
                                                <input type="file" name="submissionFile" class="form-control"
                                                       id="submissionFile-@item.AssignedTaskId"
                                                       accept=".jpg,.jpeg,.png,.pdf,.docx" />
                                                <input type="url" name="submissionLink" class="form-control d-none"
                                                       id="submissionLink-@item.AssignedTaskId"
                                                       placeholder="https://example.com" />
                                            </div>

                                            <button type="submit" class="btn btn-primary w-100">
                                                <i class="bi bi-check-circle"></i> Submit for Review
                                            </button>
                                        }
                                        else if (item.Status == ProjectManagement.Models.TaskStatus.PendingConfirmation)
                                        {
                                            <input type="hidden" name="newStatus" value="2" />
                                            <button type="submit" class="btn btn-warning w-100">
                                                <i class="bi bi-arrow-counterclockwise"></i> Recall
                                            </button>
                                        }
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<style>
    .highlight-task {
        transform: scale(1.05);
        border: 3px solid #0d6efd !important;
        border-radius: 12px;
        margin-top: -20px;
    }
</style>

@section Scripts {
    @if (!viewingSingle)
    {
        <script>
            const taskCards = document.querySelectorAll(".task-card");
            const statusFilter = document.getElementById("statusFilter");
            const dueFilter = document.getElementById("dueFilter");
            const customDatePicker = document.getElementById("customDatePicker");
            const clearFilters = document.getElementById("clearFilters");

            function applyFilters() {
                const today = new Date();
                const dueVal = dueFilter.value;
                const selectedStatus = statusFilter.value;

                taskCards.forEach(card => {
                    const cardDate = new Date(card.getAttribute("data-duedate"));
                    const cardStatus = card.getAttribute("data-status");

                    const statusMatch = !selectedStatus || cardStatus === selectedStatus;

                    let dateMatch = true;
                    if (dueVal === "7" || dueVal === "15" || dueVal === "30") {
                        const maxDate = new Date();
                        maxDate.setDate(today.getDate() + parseInt(dueVal));
                        dateMatch = cardDate >= today && cardDate <= maxDate;
                    } else if (dueVal === "custom" && customDatePicker.value) {
                        const selectedDate = new Date(customDatePicker.value);
                        dateMatch = cardDate.toDateString() === selectedDate.toDateString();
                    }

                    card.style.display = (statusMatch && dateMatch) ? "" : "none";
                });
            }

            document.querySelectorAll(".toggle-submission").forEach(radio => {
                radio.addEventListener("change", function () {
                    let taskId = this.getAttribute("data-taskid");
                    let fileInput = document.getElementById("submissionFile-" + taskId);
                    let linkInput = document.getElementById("submissionLink-" + taskId);

                    if (this.value === "file") {
                        fileInput.classList.remove("d-none");
                        linkInput.classList.add("d-none");
                    } else {
                        fileInput.classList.add("d-none");
                        linkInput.classList.remove("d-none");
                    }
                });
            });

            dueFilter.addEventListener("change", () => {
                customDatePicker.classList.toggle("d-none", dueFilter.value !== "custom");
                if (dueFilter.value !== "custom") customDatePicker.value = "";
                applyFilters();
            });
            customDatePicker.addEventListener("change", applyFilters);
            statusFilter.addEventListener("change", applyFilters);
            clearFilters.addEventListener("click", () => {
                dueFilter.value = "";
                customDatePicker.value = "";
                customDatePicker.classList.add("d-none");
                statusFilter.value = "";
                applyFilters();
            });
            applyFilters();
        </script>
    }
}
