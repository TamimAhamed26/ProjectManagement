@model IEnumerable<ProjectManagement.Models.CategoryViewModel>

@{
    ViewData["Title"] = "Categories";
}

<h2 class="mb-4">Categories</h2>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<!-- Create button -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <button class="btn btn-primary" onclick="showCreateModal()">
        <i class="bi bi-plus-circle"></i> Create New Category
    </button>
</div>

<!-- Category cards -->
<div class="row g-4" id="categories-container">
    @foreach (var item in Model)
    {
        <div class="col-md-6 col-lg-4" id="category-card-@item.CategoryId">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-header d-flex justify-content-between align-items-center bg-light">
                    <div class="d-flex align-items-center">
                        <span class="fw-bold me-2 category-name">@item.Name</span>
                        <span class="badge bg-primary category-badge">@item.TaskCount</span>
                    </div>
                    <div>
                        <a href="javascript:void(0)" class="text-warning me-2"
                           title="Edit"
                           onclick="showEditModal(@item.CategoryId, '@item.Name', '@(item.DepartmentId ?? 0)')">
                            <i class="bi bi-pencil-square fs-5"></i>
                        </a>
                        <a href="javascript:void(0)" class="text-danger"
                           title="Delete"
                           onclick="deleteCategory(@item.CategoryId)">
                            <i class="bi bi-trash fs-5"></i>
                        </a>
                    </div>
                </div>

                <div class="card-body">
                    <p class="mb-2">
                        <span class="text-muted">Department:</span>
                        <strong class="category-department">
                            @(
                                                    string.IsNullOrEmpty(item.DepartmentName) ? "None" : item.DepartmentName
                                                    )
                    </strong>
                </p>

                    <!-- Show/hide tasks -->
                    <button class="btn btn-sm btn-outline-primary w-100 mb-3"
                            onclick="toggleTasks(@item.CategoryId)">
                        <i class="bi bi-list-task"></i> Show / Hide Tasks
                    </button>

                    <div id="tasks-@item.CategoryId" style="display:none;">
                        <ul class="list-group list-group-flush mb-3" id="task-list-@item.CategoryId">
                        @if (item.TaskTitles != null && item.TaskTitles.Any())
                            {
                                for (int i = 0; i < item.TaskTitles.Count; i++)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center"
                                        id="task-@item.TaskIds[i]">
                                        <span>@item.TaskTitles[i]</span>
                                        <button class="btn btn-sm btn-outline-danger"
                                                onclick="deleteTask(@item.TaskIds[i], @item.CategoryId)">
                                            <i class="bi bi-x-circle"></i>
                                        </button>
                                    </li>
                                }
                            }
                            else
                            {
                                <li class="list-group-item text-muted"><em>No tasks</em></li>
                            }
                        </ul>

                        <!-- Add task -->
                        <div class="input-group">
                            <select id="task-dropdown-@item.CategoryId" class="form-select"></select>
                            <button class="btn btn-success" onclick="assignTask(@item.CategoryId)">
                                <i class="bi bi-plus-circle"></i> Add
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Create/Edit Modal -->
<div class="modal fade" id="categoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="categoryModalTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="categoryId" />
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <input type="text" class="form-control" id="categoryName" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Department</label>
                    <select id="categoryDepartment" class="form-select">
                        <option value="">-- None --</option>
                        @foreach (var dep in ViewBag.Departments as List<SelectListItem>)
                        {
                            <option value="@dep.Value">@dep.Text</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveCategoryBtn">Save</button>
            </div>
        </div>
    </div>
</div>

<script>
    // ---- TASK LOGIC (unchanged) ----
    function toggleTasks(categoryId) {
        const row = document.getElementById("tasks-" + categoryId);
        if (row.style.display === "none") {
            row.style.display = "";
            loadUnassignedTasks(categoryId);
        } else {
            row.style.display = "none";
        }
    }

    function loadUnassignedTasks(categoryId) {
        fetch('/Categories/GetUnassignedTasks')
            .then(res => res.json())
            .then(data => {
                const dropdown = document.getElementById("task-dropdown-" + categoryId);
                dropdown.innerHTML = "";
                if (!data.length) {
                    dropdown.innerHTML = "<option>No unassigned tasks</option>";
                } else {
                    dropdown.innerHTML = "<option value=''>-- Select Task --</option>";
                    data.forEach(t => {
                        const opt = document.createElement("option");
                        opt.value = t.taskId;
                        opt.text = t.title;
                        dropdown.add(opt);
                    });
                }
            });
    }

    function assignTask(categoryId) {
        const select = document.getElementById("task-dropdown-" + categoryId);
        const taskId = select.value;
        if (!taskId) return;

        fetch('/Categories/AssignTaskToCategory', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `taskId=${taskId}&categoryId=${categoryId}`
        })
        .then(res => res.json())
        .then(res => {
            if (res.success) updateTaskUI(res.category);
            else alert(res.message);
        });
    }

    function deleteTask(taskId, categoryId) {
        if (!confirm("Are you sure you want to remove this task?")) return;

        fetch('/Categories/DeleteTaskFromCategory', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `taskId=${taskId}`
        })
        .then(res => res.json())
        .then(res => {
            if (res.success) updateTaskUI(res.category);
            else alert(res.message);
        });
    }

    function updateTaskUI(category) {
        const list = document.getElementById(`task-list-${category.categoryId}`);
        list.innerHTML = "";
        if (!category.tasks.length) {
            list.innerHTML = "<li class='list-group-item text-muted'><em>No tasks</em></li>";
        } else {
            category.tasks.forEach(t => {
                const li = document.createElement("li");
                li.className = "list-group-item d-flex justify-content-between align-items-center";
                li.id = `task-${t.taskId}`;
                li.innerHTML = `<span>${t.title}</span>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteTask(${t.taskId}, ${category.categoryId})">
                                    <i class="bi bi-x-circle"></i>
                                </button>`;
                list.appendChild(li);
            });
        }

        // update badge
        const badge = document.querySelector(`#tasks-${category.categoryId}`).closest(".card")
                       .querySelector(".category-badge");
        badge.innerText = category.tasks.length;

        // refresh dropdowns
        document.querySelectorAll("[id^='task-dropdown-']").forEach(dd => loadUnassignedTasks(parseInt(dd.id.replace('task-dropdown-', ''))));
    }

    // ---- MODAL LOGIC ----
    function showCreateModal() {
        document.getElementById("categoryId").value = "";
        document.getElementById("categoryName").value = "";
        document.getElementById("categoryDepartment").value = "";
        document.getElementById("categoryModalTitle").innerText = "Create Category";
        document.getElementById("saveCategoryBtn").onclick = saveNewCategory;
        new bootstrap.Modal(document.getElementById("categoryModal")).show();
    }

    function showEditModal(id, name, departmentId) {
        document.getElementById("categoryId").value = id;
        document.getElementById("categoryName").value = name;
        document.getElementById("categoryDepartment").value = departmentId || "";
        document.getElementById("categoryModalTitle").innerText = "Edit Category";
        document.getElementById("saveCategoryBtn").onclick = saveEditedCategory;
        new bootstrap.Modal(document.getElementById("categoryModal")).show();
    }

    // ---- CREATE ----
    function saveNewCategory() {
        const name = document.getElementById("categoryName").value;
        const depId = document.getElementById("categoryDepartment").value;

        fetch('/Categories/CreateCategoryAjax', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `name=${encodeURIComponent(name)}&departmentId=${depId}`
        })
        .then(res => res.json())
        .then(res => {
            if (res.success) {
                addCategoryCard(res.categoryId, res.name, res.departmentName);
                bootstrap.Modal.getInstance(document.getElementById("categoryModal")).hide();
            } else alert(res.message);
        });
    }

    // ---- EDIT ----
    function saveEditedCategory() {
        const id = document.getElementById("categoryId").value;
        const name = document.getElementById("categoryName").value;
        const depId = document.getElementById("categoryDepartment").value;

        fetch('/Categories/EditCategoryAjax', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `id=${id}&name=${encodeURIComponent(name)}&departmentId=${depId}`
        })
        .then(res => res.json())
        .then(res => {
            if (res.success) {
                updateCategoryCard(res.categoryId, res.name, res.departmentName);
                bootstrap.Modal.getInstance(document.getElementById("categoryModal")).hide();
            } else alert(res.message);
        });
    }

    // ---- DELETE ----
    function deleteCategory(id) {
        if (!confirm("Are you sure you want to delete this category?")) return;

        fetch('/Categories/DeleteCategoryAjax', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `id=${id}`
        })
        .then(res => res.json())
        .then(res => {
            if (res.success) document.getElementById(`category-card-${id}`).remove();
            else alert(res.message);
        });
    }

    // ---- DOM HELPERS ----
    function addCategoryCard(id, name, departmentName) {
        const container = document.getElementById("categories-container");
        const col = document.createElement("div");
        col.className = "col-md-6 col-lg-4";
        col.id = `category-card-${id}`;
        col.innerHTML = `
            <div class="card shadow-sm border-0 h-100">
                <div class="card-header d-flex justify-content-between align-items-center bg-light">
                    <div class="d-flex align-items-center">
                        <span class="fw-bold me-2 category-name">${name}</span>
                        <span class="badge bg-primary category-badge">0</span>
                    </div>
                    <div>
                        <a href="javascript:void(0)" class="text-warning me-2"
                           title="Edit" onclick="showEditModal(${id}, '${name}', '')">
                            <i class="bi bi-pencil-square fs-5"></i>
                        </a>
                        <a href="javascript:void(0)" class="text-danger"
                           title="Delete" onclick="deleteCategory(${id})">
                            <i class="bi bi-trash fs-5"></i>
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    <p class="mb-2">
                        <span class="text-muted">Department:</span>
                        <strong class="category-department">${departmentName || "None"}</strong>
                    </p>
                    <button class="btn btn-sm btn-outline-primary w-100 mb-3"
                            onclick="toggleTasks(${id})">
                        <i class="bi bi-list-task"></i> Show / Hide Tasks
                    </button>
                    <div id="tasks-${id}" style="display:none;">
                        <ul class="list-group list-group-flush mb-3" id="task-list-${id}">
                            <li class="list-group-item text-muted"><em>No tasks</em></li>
                        </ul>
                        <div class="input-group">
                            <select id="task-dropdown-${id}" class="form-select"></select>
                            <button class="btn btn-success" onclick="assignTask(${id})">
                                <i class="bi bi-plus-circle"></i> Add
                            </button>
                        </div>
                    </div>
                </div>
            </div>`;
        container.appendChild(col);
    }

    function updateCategoryCard(id, name, departmentName) {
        const card = document.getElementById(`category-card-${id}`);
        if (!card) return;
        card.querySelector(".category-name").innerText = name;
        card.querySelector(".category-department").innerText = departmentName || "None";
    }
</script>
